#!/bin/sh

# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

Makefile() {
cat << EOF > Makefile
# This Makefile automatically generated by configure.

CC =		$cc
CFLAGS =	$cflags
EOF

if [ ! -z "$ldflags" ] ; then
cat << EOF >> Makefile
LDFLAGS =	$ldflags
EOF
fi

if [ ! -z "$vpath" ] ; then
cat << EOF >> Makefile

VPATH =		$vpath
EOF
fi

cat << EOF >> Makefile

BINDIR =	$bindir
MANDIR =	$mandir

PROG =	freebee
OBJS =	$objs

all: \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS} $libs

install:
	install -d \${DESTDIR}\${BINDIR}
	install -d \${DESTDIR}\${MANDIR}/man1
	install -c -s -m 755 \${PROG} \${DESTDIR}\${BINDIR}
	install -c -m 644 \${PROG}.1 \${DESTDIR}\${MANDIR}/man1

test:
	@echo "No tests"

clean:
	rm -f \${PROG} \${OBJS}

distclean: clean
	rm -f Makefile \${PROG}.core
EOF
}

arc4randomuniformcheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
int main(void){arc4random_uniform(0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

cccheck() {
  for compiler in "$CC" cc clang xlc gcc ; do
cat << EOF > conftest.c
int main(void){return 0;}
EOF
    $compiler $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
    $compiler $ldflags -o conftest conftest.o > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.o conftest.c
	cc="$compiler"
	return 0
      else
	echo "error: Could not build working executables"
	exit 1
      fi
    else
      rm -f conftest conftest.o conftest.c
    fi
  done
  return 1
}

cursescheck() {
  cat << EOF > conftest.c
#include <term.h>
#include <curses.h>
int main(void){setupterm(NULL, 0, NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o -lcurses > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

defaultcflagscheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc -O2 -pipe -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

ltoflagcheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -flto -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -flto -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

ncursescheck() {
  cat << EOF > conftest.c
#include <term.h>
#include <ncurses.h>
int main(void){setupterm(NULL, 0, NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c -lncurses > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o -lncurses > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

ncursesncursescheck() {
  cat << EOF > conftest.c
#include <ncurses/term.h>
#include <ncurses/ncurses.h>
int main(void){setupterm(NULL, 0, NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c -lncurses > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o -lncurses > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

pledgecheck() {
  cat << EOF > conftest.c
#include <unistd.h>
int main(void){pledge(NULL,NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

strlcatcheck() {
  cat << EOF > conftest.c
#include <string.h>
int main(void){strlcat(NULL,NULL,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

# Option variables
if [ ! -z "$PREFIX" ] ; then
  prefix="$PREFIX"
else
  prefix="/usr/local"
fi

bindirset=0
mandirset=0
bindir="$prefix/bin"
mandir="$prefix/share/man"

curses=1
lto=0

objs="anagram.o game.o main.o rank.o"

# Options
for opt
do
  case "$opt" in
    --prefix=*)
	prefix=${opt#*=}
	if [ $bindirset -eq 0 ] ; then
	  bindir="$prefix/bin"
	fi
	if [ $mandirset -eq 0 ] ; then
	  mandir="$prefix/share/man"
	fi
	;;
    --bindir=*)
	bindir=${opt#*=}
	bindirset=1
	;;
    --mandir=*)
	mandir=${opt#*=}
	mandirset=1
	;;
    --cc=*)
	CC=${opt#*=}
	;;
    --cflags=*)
	CFLAGS=${opt#*=}
	;;
    --ldflags=*)
	LDFLAGS=${opt#*=}
	;;
    --os=*)
	os=${opt#*=}
	;;
    --disable-lto|--enable-lto)
	if [ "x$opt" = "x--enable-lto" ] ; then
	  lto=1
	else
	  lto=0
	fi
	;;
    --help|-h)
	echo "Usage: configure [options]"
	echo ""
	echo "Options:"
	printf "  --help or -h            "
	echo "Display this help message"
	printf "  --prefix=PREFIX         "
	echo "Top level install directory is PREFIX [$prefix]"
	printf "  --bindir=BINDIR         "
	echo "Install executable to BINDIR [$bindir]"
	printf "  --mandir=MANDIR         "
	echo "Install manual pages to MANDIR [$mandir]"
	printf "  --cc=CC                 "
	echo "Use specified C compiler [default=cc]"
	printf "  --cflags=CFLAGS         "
        echo "Use specified CFLAGS [default=\"-O2 -pipe\"]"
	printf "  --ldflags=LDFLAGS       "
        echo "Use specified LDFLAGS [default=\"\"]"
        printf "  --os=OS                 "
        echo "Use specified OS [default=\"$(uname -s)\"]"
	printf "  --enable-lto            "
	echo "Enable link-time optimization [default=no]"
	exit 1
	;;
    *)
	;;
  esac
done

if [ ! -z "$CFLAGS" ] ; then
  cflags="$CFLAGS"
else
  cflags=""
fi

if [ ! -z "$LDFLAGS" ] ; then
  ldflags="$LDFLAGS"
else
  ldflags=""
fi

printf "checking for C compiler... "
cccheck
if [ $? -ne 0 ] ; then
  echo "not found"
  echo "error: Please install a C compiler and re-run configure"
  exit 1
else
  echo "$cc"
fi

if [ "x$cflags" = "x" ] ; then
  printf "checking if the compiler accepts -O2 -pipe... "
  defaultcflagscheck
  if [ $? -eq 0 ] ; then
    echo "no"
  else
    cflags="-O2 -pipe"
    echo "yes"
  fi
fi

printf "checking for OS... "
if [ -z "$os" ] ; then
  os=$(uname -s)
fi
printf "$os"

case "x$os" in
  "xLinux"|"xCYGWIN"*|"xlinux"|"xcygwin"*)
    cflags="$cflags -D_GNU_SOURCE"
    echo ", adding -D_GNU_SOURCE"
    ;;
  "xNetBSD"|"xnetbsd")
    cflags="$cflags -D_OPENBSD_SOURCE"
    echo ", adding -D_OPENBSD_SOURCE"
    ;;
  "xAIX"|"xOS400"|"xaix"|"xos400")
    cflags="$cflags -D_ALL_SOURCE"
    ldflags="-lbsd"
    echo ", adding -D_ALL_SOURCE and -lbsd"
    ;;
  *)
    printf "\n"
    ;;
esac

printf "checking for -flto compiler flag... "
if [ $lto -eq 0 ] ; then
  echo "not enabled"
else
  ltoflagcheck
  if [ $lto -eq 0 ] ; then
    echo "no"
  else
    cflags="$cflags -flto"
    ldflags="$ldflags -flto -Wl,-O3"
    echo "yes"
  fi
fi

printf "checking for curses library... "
if [ $curses -eq 1 ] ; then
  cursescheck
  if [ $? -eq 0 ] ; then
    libs="-lcurses"
    echo "curses.h"
  else
    ncursescheck
    if [ $? -eq 0 ] ; then
      libs="-lncurses"
      echo "ncurses.h"
    else
      ncursesncursescheck
      if [ $? -eq 0 ] ; then
	libs="-lncurses"
	echo "ncurses/ncurses.h"
      else
	echo "not found"
	echo "error: You need ncurses to build Free Bee"
	exit 1
      fi
    fi
  fi
fi

printf "checking for arc4random_uniform... "
arc4randomuniformcheck
if [ $? -eq 0 ] ; then
  cflags="$cflags -DHAVE_ARC4RANDOM_UNIFORM"
  echo "yes"
else
  extras="arc4random_uniform.o"
  echo "no"
fi

printf "checking for pledge... "
pledgecheck
if [ $? -eq 0 ] ; then
  cflags="$cflags -DHAVE_PLEDGE"
  echo "yes"
else
  echo "no"
fi

printf "checking for strlcat... "
strlcatcheck
if [ $? -eq 0 ] ; then
  cflags="$cflags -DHAVE_STRLCAT"
  echo "yes"
else
  extras="$extras strlcat.o"
  echo "no"
fi

printf "checking for out-of-tree build... "
if [ "x$(dirname $0)" = "x." ] ; then
  echo "no"
elif [ "x$(dirname $0)" = "x$(pwd)" ] ; then
  echo "no"
else
  echo "yes"
  vpath="$(dirname $0)"
  cflags="$cflags -I$(pwd)"
fi

if [ ! -z "$extras" ] ; then
  objs="$objs \\
	$extras"
fi

if [ ! -z "$cflags" ] ; then
  cflags="${cflags## }"
fi

if [ ! -z "$ldflags" ] ; then
  ldflags="${ldflags## }"
fi

printf "creating Makefile... "
Makefile
echo "done"
